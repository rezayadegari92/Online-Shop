openapi: 3.0.3
info:
  title: Online Shop API
  version: 1.0.0
  description: API for an online shop built with Django Rest Framework
paths:
  /accounts/api/login/:
    post:
      operationId: accounts_api_login_create
      description: Authenticate a customer and return JWT tokens.
      summary: Customer Login
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequestRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                description: Unauthorized
          description: ''
  /accounts/api/logout/:
    post:
      operationId: accounts_api_logout_create
      description: Blacklist the refresh token to log out the user.
      summary: Customer Logout
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerLogoutRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomerLogoutRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomerLogoutRequestRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '205':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerLogoutResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
  /accounts/api/profile/:
    get:
      operationId: accounts_api_profile_retrieve
      description: Retrieve the authenticated user's profile information.
      summary: Get User Profile
      tags:
      - User Profile
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    patch:
      operationId: accounts_api_profile_partial_update
      description: Update the authenticated user's profile information.
      summary: Update User Profile
      tags:
      - User Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfileRequest'
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /accounts/api/signup/:
    post:
      operationId: accounts_api_signup_create
      description: Register a new customer and send an OTP for verification.
      summary: Customer Signup
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSignupRequestRequest'
            examples:
              CustomerSignupExample:
                value:
                  email: test@example.com
                  password: password123
                  first_name: John
                  last_name: Doe
                  birth_date: '1990-01-01'
                  address:
                    street: 123 Main St
                    city: Anytown
                    state: CA
                    postal_code: '90210'
                    phone_number: '+989123456789'
                summary: Customer Signup Example
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomerSignupRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomerSignupRequestRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSignupResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
  /accounts/api/verify-otp/:
    post:
      operationId: accounts_api_verify_otp_create
      description: Verify the OTP sent to the user's email and complete the registration
        process.
      summary: Verify OTP and Complete Signup
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOTPRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyOTPRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyOTPRequestRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyOTPResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
  /api/addresses/:
    get:
      operationId: api_addresses_list
      description: Retrieve a list of user addresses or create a new address.
      summary: List and Create Addresses
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Addresses
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAddressList'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAddressList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                description: Unauthorized
          description: ''
    post:
      operationId: api_addresses_create
      description: Retrieve a list of user addresses or create a new address.
      summary: List and Create Addresses
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddressRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAddressList'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
        '401':
          content:
            application/json:
              schema:
                description: Unauthorized
          description: ''
  /api/addresses/{id}/:
    get:
      operationId: api_addresses_retrieve
      description: Retrieve, update, or delete a specific address by ID.
      summary: Retrieve, Update or Delete Address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Addresses
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
        '401':
          content:
            application/json:
              schema:
                description: Unauthorized
          description: ''
    put:
      operationId: api_addresses_update
      description: Retrieve, update, or delete a specific address by ID.
      summary: Retrieve, Update or Delete Address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddressRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
        '401':
          content:
            application/json:
              schema:
                description: Unauthorized
          description: ''
    patch:
      operationId: api_addresses_partial_update
      description: Retrieve, update, or delete a specific address by ID.
      summary: Retrieve, Update or Delete Address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAddressRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAddressRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAddressRequest'
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
        '401':
          content:
            application/json:
              schema:
                description: Unauthorized
          description: ''
    delete:
      operationId: api_addresses_destroy
      description: Retrieve, update, or delete a specific address by ID.
      summary: Retrieve, Update or Delete Address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Addresses
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
        '401':
          content:
            application/json:
              schema:
                description: Unauthorized
          description: ''
  /api/addresses/{id}/set-default/:
    post:
      operationId: api_addresses_set_default_create
      description: Set a specific address as the default address for the authenticated
        user.
      summary: Set Default Address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Addresses
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDefaultAddressResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
        '401':
          content:
            application/json:
              schema:
                description: Unauthorized
          description: ''
  /api/brands/:
    get:
      operationId: api_brands_list
      description: Retrieve a list of all product brands.
      summary: List Brands
      tags:
      - Brands
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Brand'
          description: ''
  /api/brands/{id}/products/:
    get:
      operationId: api_brands_products_list
      description: Retrieve a list of products belonging to a specific brand, with
        pagination.
      summary: List Products by Brand
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number for pagination
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of items per page
      tags:
      - Brands
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
  /api/cart/:
    get:
      operationId: api_cart_retrieve
      description: Retrieve the contents of the user's cart. For anonymous users,
        cart data is retrieved from cookies.
      summary: Get Cart Content
      tags:
      - Cart
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
    post:
      operationId: api_cart_create
      description: Add a product to the user's cart. For anonymous users, cart data
        is stored in cookies.
      summary: Add Item to Cart
      tags:
      - Cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemCreateRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
        '500':
          content:
            application/json:
              schema:
                description: Internal Server Error
          description: ''
    put:
      operationId: api_cart_update
      description: Update the quantity of a product in the user's cart, or remove
        it if quantity is 0. For anonymous users, cart data is stored in cookies.
      summary: Update Item Quantity in Cart
      tags:
      - Cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemUpdateDeleteRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemUpdateDeleteRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemUpdateDeleteRequestRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
        '500':
          content:
            application/json:
              schema:
                description: Internal Server Error
          description: ''
    delete:
      operationId: api_cart_destroy
      description: Remove a product from the user's cart. For anonymous users, cart
        data is stored in cookies.
      summary: Remove Item from Cart
      tags:
      - Cart
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
        '500':
          content:
            application/json:
              schema:
                description: Internal Server Error
          description: ''
  /api/cart/apply-discount/:
    post:
      operationId: api_cart_apply_discount_create
      description: Apply a discount code to the user's cart.
      summary: Apply Discount Code
      tags:
      - Cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplyDiscountRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ApplyDiscountRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ApplyDiscountRequestRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyDiscountResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
  /api/cart/checkout/:
    post:
      operationId: api_cart_checkout_create
      description: Process the checkout for the authenticated user's cart, creating
        an order.
      summary: Checkout
      tags:
      - Orders
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
  /api/cart/items/:
    get:
      operationId: api_cart_items_list
      description: Retrieve a list of cart items or add a new item to the cart.
      summary: List and Add Cart Items
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Cart Items
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
    post:
      operationId: api_cart_items_create
      description: Retrieve a list of cart items or add a new item to the cart.
      summary: List and Add Cart Items
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Cart Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemCreateRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
  /api/cart/items/{id}/:
    get:
      operationId: api_cart_items_retrieve
      description: Retrieve, update, or delete a specific cart item by ID.
      summary: Retrieve, Update or Delete Cart Item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        description: ID of the cart item to retrieve, update or delete.
        required: true
      tags:
      - Cart Items
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '204':
          content:
            application/json:
              schema:
                description: No Content
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
    put:
      operationId: api_cart_items_update
      description: Retrieve, update, or delete a specific cart item by ID.
      summary: Retrieve, Update or Delete Cart Item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        description: ID of the cart item to retrieve, update or delete.
        required: true
      tags:
      - Cart Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemCreateRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '204':
          content:
            application/json:
              schema:
                description: No Content
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
    patch:
      operationId: api_cart_items_partial_update
      description: Retrieve, update, or delete a specific cart item by ID.
      summary: Retrieve, Update or Delete Cart Item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        description: ID of the cart item to retrieve, update or delete.
        required: true
      tags:
      - Cart Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreateRequest'
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '204':
          content:
            application/json:
              schema:
                description: No Content
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
    delete:
      operationId: api_cart_items_destroy
      description: Retrieve, update, or delete a specific cart item by ID.
      summary: Retrieve, Update or Delete Cart Item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        description: ID of the cart item to retrieve, update or delete.
        required: true
      tags:
      - Cart Items
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '204':
          content:
            application/json:
              schema:
                description: No Content
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
  /api/categories/:
    get:
      operationId: api_categories_list
      description: Retrieve a list of product categories (only root categories with
        their children).
      summary: List Categories
      tags:
      - Categories
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
  /api/categories/{id}/products/:
    get:
      operationId: api_categories_products_list
      description: Retrieve a list of products belonging to a specific category, with
        pagination.
      summary: List Products by Category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: Page number for pagination
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of items per page
      tags:
      - Categories
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
  /api/discounted-products/:
    get:
      operationId: api_discounted_products_list
      description: Retrieve a list of all products with a discount applied.
      summary: List Discounted Products
      tags:
      - Products
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
  /api/discounted-products/{id}/:
    get:
      operationId: api_discounted_products_retrieve
      description: Retrieve the details of a specific discounted product.
      summary: Retrieve Discounted Product Details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        description: ID of the discounted product to retrieve.
        required: true
      tags:
      - Products
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
    post:
      operationId: api_discounted_products_create
      description: Add a comment or rating to a specific discounted product.
      summary: Add Comment or Rating to Discounted Product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        description: ID of the discounted product to retrieve.
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetailPostRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductDetailPostRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductDetailPostRequestRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRating'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
  /api/orders/{id}/:
    get:
      operationId: api_orders_retrieve
      description: Retrieve the details of a specific order by ID for the authenticated
        user.
      summary: Retrieve Order Details
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        description: ID of the order to retrieve.
        required: true
      tags:
      - Orders
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/orders/orders/:
    get:
      operationId: api_orders_orders_list
      description: Retrieve a list of orders for the authenticated user.
      summary: List Orders
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Orders
      security:
      - jwtAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
  /api/products/:
    get:
      operationId: api_products_list
      description: Retrieve a list of products with optional search and pagination.
      summary: List Products
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page number for pagination
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of items per page
      - in: query
        name: search
        schema:
          type: string
          minLength: 1
        description: Search query for products (name, brand, category)
      tags:
      - Products
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
  /api/products/{id}/:
    get:
      operationId: api_products_retrieve
      description: Retrieve a product by ID, or add a comment/rating to it.
      summary: Retrieve Product Details, Add Comment or Rating
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        description: ID of the product to retrieve, comment on, or rate.
        required: true
      tags:
      - Products
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
    post:
      operationId: api_products_create
      description: Add a comment or rating to a specific discounted product.
      summary: Add Comment or Rating to Discounted Product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        description: ID of the product to retrieve, comment on, or rate.
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetailPostRequestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductDetailPostRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductDetailPostRequestRequest'
        required: true
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRating'
          description: ''
        '400':
          content:
            application/json:
              schema:
                description: Bad Request
          description: ''
        '404':
          content:
            application/json:
              schema:
                description: Not Found
          description: ''
  /api/products/top-rated/:
    get:
      operationId: api_products_top_rated_list
      description: Retrieve a list of top-rated products with pagination.
      summary: List Top Rated Products
      parameters:
      - in: query
        name: page
        schema:
          type: integer
        description: Page number for pagination
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of items per page
      - in: query
        name: search
        schema:
          type: string
          minLength: 1
        description: Search query for products (name, brand, category)
      tags:
      - Products
      security:
      - jwtAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zip_code:
          type: string
        phone_number:
          type: string
        is_default:
          type: boolean
          readOnly: true
      required:
      - city
      - id
      - is_default
      - phone_number
      - state
      - street
      - zip_code
    AddressRequest:
      type: object
      properties:
        state:
          type: string
          minLength: 1
          maxLength: 100
        city:
          type: string
          minLength: 1
          maxLength: 100
        street:
          type: string
          minLength: 1
          maxLength: 255
        postal_code:
          type: string
          minLength: 1
          maxLength: 20
        phone_number:
          type: string
          minLength: 1
          title: شماره تلفن
          pattern: ^(?:\+98|0)9\d{9}$
          maxLength: 13
        is_default:
          type: boolean
        country:
          type: string
          minLength: 1
          default: Iran
          maxLength: 100
      required:
      - city
      - state
      - street
    ApplyDiscountRequestRequest:
      type: object
      properties:
        code:
          type: string
          minLength: 1
          description: Discount code to apply
      required:
      - code
    ApplyDiscountResponse:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    Brand:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        slug:
          type: string
          readOnly: true
        image:
          type: string
          format: uri
          readOnly: true
      required:
      - id
      - image
      - name
      - slug
    Cart:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        discount_code:
          type: string
          readOnly: true
          nullable: true
      required:
      - discount_code
      - id
      - items
      - total_price
      - user
    CartItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        product_name:
          type: string
          readOnly: true
        quantity:
          type: integer
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
      required:
      - id
      - price
      - product
      - product_name
      - quantity
      - total_price
    CartItemCreateRequest:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
          minimum: 1
      required:
      - product_id
      - quantity
    CartItemUpdateDeleteRequestRequest:
      type: object
      properties:
        product_id:
          type: integer
          description: ID of the product to update/remove
        quantity:
          type: integer
          minimum: 0
          description: New quantity for the product (0 to remove)
      required:
      - product_id
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        slug:
          type: string
          readOnly: true
        description:
          type: string
        image:
          type: string
          format: uri
          readOnly: true
        parent:
          type: integer
          readOnly: true
          nullable: true
        children:
          type: string
          readOnly: true
      required:
      - children
      - id
      - image
      - name
      - parent
      - slug
    CheckoutResponse:
      type: object
      properties:
        detail:
          type: string
        order_id:
          type: integer
      required:
      - detail
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        content:
          type: string
        author:
          type: string
          readOnly: true
        product:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - author
      - content
      - created_at
      - id
      - product
    CustomerLogoutRequestRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
          description: Refresh token to blacklist
      required:
      - refresh
    CustomerLogoutResponse:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    CustomerSignupRequestRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        username:
          type: string
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        password:
          type: string
          writeOnly: true
          minLength: 1
        birth_date:
          type: string
          format: date
        address:
          $ref: '#/components/schemas/AddressRequest'
      required:
      - birth_date
      - password
    CustomerSignupResponse:
      type: object
      properties:
        message:
          type: string
        email:
          type: string
          format: email
      required:
      - email
      - message
    LoginRequestRequest:
      type: object
      properties:
        email_or_username:
          type: string
          minLength: 1
        email:
          type: string
          format: email
          minLength: 1
        username:
          type: string
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
    LoginResponse:
      type: object
      properties:
        message:
          type: string
        user_id:
          type: integer
        email:
          type: string
          format: email
        access:
          type: string
        refresh:
          type: string
        user_type:
          type: string
      required:
      - access
      - email
      - message
      - refresh
      - user_id
      - user_type
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: true
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        status:
          type: string
          readOnly: true
        shipping_address:
          type: string
          readOnly: true
        payment_status:
          type: string
          readOnly: true
        discount_code:
          type: string
          readOnly: true
          nullable: true
      required:
      - created_at
      - discount_code
      - id
      - items
      - payment_status
      - shipping_address
      - status
      - total_price
      - updated_at
      - user
    OrderItem:
      type: object
      properties:
        product_name:
          type: string
          readOnly: true
        quantity:
          type: integer
          readOnly: true
        price_at_purchase:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        total_item_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
      required:
      - price_at_purchase
      - product_name
      - quantity
      - total_item_price
    PaginatedAddressList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    PaginatedCartItemList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    PaginatedOrderList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PatchedAddressRequest:
      type: object
      properties:
        street:
          type: string
          minLength: 1
        city:
          type: string
          minLength: 1
        state:
          type: string
          minLength: 1
        zip_code:
          type: string
          minLength: 1
        phone_number:
          type: string
          minLength: 1
    PatchedCartItemCreateRequest:
      type: object
      properties:
        product_id:
          type: integer
        quantity:
          type: integer
          minimum: 1
    PatchedUserProfileRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          maxLength: 150
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        birth_date:
          type: string
          format: date
          nullable: true
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        slug:
          type: string
          readOnly: true
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        discount_percent:
          type: integer
        discounted_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        image:
          type: string
          format: uri
          readOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        brand:
          allOf:
          - $ref: '#/components/schemas/Brand'
          readOnly: true
        average_rating:
          type: number
          format: double
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - average_rating
      - brand
      - category
      - created_at
      - description
      - discount_percent
      - discounted_price
      - id
      - image
      - name
      - price
      - slug
      - updated_at
    ProductDetailPostRequestRequest:
      type: object
      properties:
        action:
          enum:
          - comment
          - rate
          type: string
          description: |-
            Action to perform: 'comment' or 'rate'

            * `comment` - comment
            * `rate` - rate
        content:
          type: string
          minLength: 1
          description: Content of the comment (if action is 'comment')
        rating:
          type: integer
          maximum: 5
          minimum: 1
          description: Rating value (if action is 'rate')
      required:
      - action
    ProductRating:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        value:
          type: integer
          maximum: 5
          minimum: 1
        user:
          type: string
          readOnly: true
        product:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - product
      - user
      - value
    SetDefaultAddressResponse:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        birth_date:
          type: string
          format: date
          nullable: true
        user_type:
          enum:
          - manager
          - supervisor
          - operator
          - customer
          type: string
          description: |-
            * `manager` - Manager
            * `supervisor` - Supervisor
            * `operator` - Operator
            * `customer` - Customer
          readOnly: true
        date_joined:
          type: string
          format: date-time
          readOnly: true
      required:
      - date_joined
      - id
      - user_type
    VerifyOTPRequestRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
        otp_code:
          type: string
          minLength: 1
      required:
      - email
      - otp_code
    VerifyOTPResponse:
      type: object
      properties:
        message:
          type: string
        user_id:
          type: integer
        access:
          type: string
        refresh:
          type: string
        email:
          type: string
          format: email
        user_type:
          type: string
      required:
      - access
      - email
      - message
      - refresh
      - user_id
      - user_type
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter your JWT access token (without Bearer prefix)
